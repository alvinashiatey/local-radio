#!/usr/bin/env node

/**
 * Module dependencies.
 */

const fs = require('fs');
const https = require('https');
const debug = require('debug')('app:server');
const app = require('../app');
const routeWsRequest = require('../websocket/route-ws');

const privateKey = fs.readFileSync(process.env.KEY_PATH);
const certificate = fs.readFileSync(process.env.CERT_PATH);

/**
 * Get port from environment and store in Express.
 */

// eslint-disable-next-line
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = https.createServer({ key: privateKey, cert: certificate }, app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
// eslint-disable-next-line
server.on('error', onError);
// eslint-disable-next-line
server.on('listening', onListening);
server.on('upgrade', routeWsRequest);


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? `Pipe ${port}`
        : `Port ${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        // eslint-disable-next-line
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        // eslint-disable-next-line
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? `pipe ${addr}`
        : `port ${addr.port}`;
    debug(`Listening on ${bind}`);
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    // eslint-disable-next-line
    const port = parseInt(val, 10);

    // eslint-disable-next-line
    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}
